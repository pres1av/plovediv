// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
	@if $self {
    	&,
		&:hover,
		&:active,
		&:focus {
			@content;
    	}
	} @else {
	    &:hover,
		&:active,
		&:focus {
			@content;
    	}
	}
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
	#{$context} & {
    	@content;
  	}
}

/// Center an absolutely positioned element inside its parent
@mixin absCenter {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/// Organise responsive media queries
/// @param {String} $breakpoint
@mixin responsive($breakpoint) {
    @media only screen and (max-width: map-get($breakpoints, $breakpoint)) { @content };
}

/// Prefixes for transition CSS rule
/// @param {List of Strings} $transition
@mixin transition($transition...) {
	-webkit-transition: $transition;
	-ms-transition: $transition;
	transition: $transition;
}

/// Prefixes for box-shadow CSS rule
/// @param {List of Strings} $box-shadow
@mixin box-shadow($box-shadow...) {
	-webkit-box-shadow: $box-shadow;
    box-shadow: $box-shadow;
}

/// Prefixes for transform CSS rule
/// @param {List of Strings} $transform
@mixin transform($transform) {
	-webkit-transform: $transform;  
    -ms-transform: $transform;  
    transform: $transform;
}

/// Prefixes for placeholder CSS pseudo-element
@mixin placeholder {
	::-webkit-input-placeholder { @content } 
	:-ms-input-placeholder { @content }
	::placeholder { @content }
}